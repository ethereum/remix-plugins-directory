#!/usr/bin/env node

const ipfsClient = require('ipfs-http-client')
const signale = require('signale')
const generateProfile = require('../generateProfile')

var program = require('commander')
var fs = require('fs')
var path = require('path')

program
.description('Upload resources to IPFS and generate a profile.')
.option('--profile-path <path>', 'Path where the profile.json should be generated. Default to current path')
.parse(process.argv)

const host = 'ipfs.komputing.org' // ethdev berlin ipfs node
const ipfs = ipfsClient({ host, port: 443, protocol: 'https' })

const targetDir = program.profilePath || __dirname

const uploadToIpfsAndGenerateProfile = async () => {
  const folder = process.argv.length > 2 ? process.argv[2] : process.cwd()
  signale.await('uploading ' + folder)
  let result = await ipfs.addFromFs(folder, {recursive: true, pin: true}) 
    
  const remoteFolder = result[result.length - 1]
  const ipfsURL = 'ipfs://' + remoteFolder.hash
  signale.success('plugin URL', ipfsURL)

  signale.await('creation of plugin profile')
  const answers = await generateProfile.run()
  answers.url = ipfsURL
  
  fs.writeFileSync(path.join(targetDir, 'profile.json'), JSON.stringify(answers, null, 1))
  
  return answers
}

uploadToIpfsAndGenerateProfile().then((result) => {
  signale.success(JSON.stringify(result, null, 1))
  signale.success(`profile.json generated at ${targetDir}`)
  if (result.icon === generateProfile.BASE64_DEFAULT_IMG) {
    signale.warn('The default BASE64 icon has been sure. Please set your own.')
  }
}).catch(signale.error)
