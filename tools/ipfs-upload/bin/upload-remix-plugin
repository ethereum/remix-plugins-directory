#!/usr/bin/env node

const yesno = require('yesno');
const signale = require('signale')
const generateProfile = require('../generateProfile')
const uploadOptions = require('../uploadOptions')
const IpfsHttpClient = require('ipfs-http-client')
const {
  globSource
} = IpfsHttpClient

var program = require('commander')
var fs = require('fs')
var path = require('path')

program
  .usage(`upload-remix-plugin <path-to-plugin-code> --profile-path <path-to-profile>`)
  .description('Upload resources to IPFS and generate a profile.')
  .option('--profile-path <path>', 'Path where the profile.json should be generated. Default to current path')
  .parse(process.argv)


program.outputHelp()

let options = {}
options.host = 'ipfs.komputing.org' // ethdev berlin ipfs node
options.port = '443'
options.protocol = 'https'

const targetDir = program.profilePath || __dirname

const uploadToIpfsAndGenerateProfile = async () => {

  options.pluginPath = process.argv.length > 2 ? process.argv[2] : process.cwd()
  options.profilePath = targetDir

  // ask confirmation options
  options = await uploadOptions.run(options)

  // check paths
  if (!fs.existsSync(options.pluginPath)) {
    signale.error("Plugin path not found: ", options.pluginPath)
    process.exit(1)
  }
  if (!fs.existsSync(options.profilePath)) {
    signale.error("Profile path not found: ", options.profilePath)
    const ok = await yesno({
      question: 'Do you want to create this folder?'
    });
    if (ok) {
      fs.mkdirSync(options.profilePath)
    } else {
      process.exit(1)
    }

  }
  // check profile.json
  options.profilePath = path.join(targetDir, 'profile.json')
  let profile = {}
  if (fs.existsSync(options.profilePath)) {
    let rawdata = fs.readFileSync(options.profilePath);
    profile = JSON.parse(rawdata)
    signale.info("Existing profile found: ", profile)
  } else {
    signale.warn(`No existing profile found at ${options.profilePath}`)
    signale.info(`Use the --profile-path <path> option to use a previously created profile`)
  }

  // upload files  
  const ipfs = IpfsHttpClient({
    host: options.host,
    port: options.port,
    protocol: options.protocol
  })
  signale.await('uploading ' + options.pluginPath)
  let result = []
  // addFromFs deprecated see https://github.com/ipfs-inactive/js-ipfs-http-client/blob/master/CHANGELOG.md
  for await (const file of ipfs.add(globSource(options.pluginPath, {
    recursive: true
  }))) {
    result.push(file)
  }

  const remoteFolder = result[result.length - 1]
  const ipfsURL = 'ipfs://' + remoteFolder.cid
  signale.success('plugin URL', ipfsURL)

  signale.await(`creation of plugin profile at ${options.profilePath}`)
  const answers = await generateProfile.run(profile)
  answers.url = ipfsURL

  fs.writeFileSync(options.profilePath, JSON.stringify(answers, null, 1))

  return answers
}

uploadToIpfsAndGenerateProfile().then((result) => {
  signale.success(JSON.stringify(result, null, 1))
  signale.success(`profile.json generated at ${targetDir}`)
  if (result.icon === generateProfile.BASE64_DEFAULT_IMG) {
    signale.warn('A default BASE64 icon has been set. Please set your own.')
  }
  return process.exit()
}).catch(signale.error)